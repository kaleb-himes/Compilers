MP_COMMENT     1   1   { a sample program 2 }
MP_PROGRAM     2   1   program
MP_IDENTIFIER  2   9   sample2
MP_SCOLON      2   16   ;
MP_VAR         3   3   var
MP_IDENTIFIER  3   7   i
MP_COMMA       3   8   ,
MP_IDENTIFIER  3   10   sum
MP_COLON       3   13   :
MP_INTEGER     3   15   integer
MP_SCOLON      3   22   ;
MP_PROCEDURE   4   3   procedure
MP_IDENTIFIER  4   13   count
MP_LPAREN      4   18   (
MP_IDENTIFIER  4   20   n
MP_COLON       4   21   :
MP_INTEGER     4   23   integer
MP_SCOLON      4   30   ;
MP_VAR         4   32   var
MP_IDENTIFIER  4   36   sum
MP_COLON       4   39   :
MP_INTEGER     4   41   integer
MP_RPAREN      4   49   )
MP_SCOLON      4   50   ;
MP_VAR         5   5   var
MP_IDENTIFIER  5   9   i
MP_COLON       5   10   :
MP_INTEGER     5   12   integer
MP_SCOLON      5   19   ;
MP_COMMENT     5   21   { local variable }
MP_BEGIN       6   3   begin
MP_IDENTIFIER  7   5   i
MP_ASSIGN      7   7   :=
MP_INTEGER_LIT 7   10   1
MP_SCOLON      7   11   ;
MP_IDENTIFIER  8   5   sum
MP_ASSIGN      8   9   :=
MP_INTEGER_LIT 8   12   0
MP_SCOLON      8   13   ;
MP_WHILE       9   5   while
MP_LPAREN      9   11   (
MP_IDENTIFIER  9   13   i
MP_LEQUAL      9   15   <=
MP_IDENTIFIER  9   18   n
MP_RPAREN      9   20   )
MP_DO          9   22   do
MP_COMMENT     9   25   { set-up the loop }
MP_BEGIN       10   7   begin
MP_IDENTIFIER  11   9   sum
MP_ASSIGN      11   13   :=
MP_IDENTIFIER  11   16   sum
MP_PLUS        11   20   +
MP_IDENTIFIER  11   22   i
MP_SCOLON      11   23   ;
MP_IDENTIFIER  12   9   i
MP_ASSIGN      12   11   :=
MP_IDENTIFIER  12   14   i
MP_PLUS        12   16   +
MP_INTEGER_LIT 12   18   1
MP_SCOLON      12   19   ;
MP_END         13   8   end
MP_END         14   3   end
MP_SCOLON      14   6   ;
MP_BEGIN       15   1   begin
MP_IDENTIFIER  16   3   readln
MP_LPAREN      16   9   (
MP_IDENTIFIER  16   10   i
MP_RPAREN      16   11   )
MP_SCOLON      16   12   ;
MP_COMMENT     16   14   { get i }
MP_IDENTIFIER  17   3   count
MP_LPAREN      17   8   (
MP_IDENTIFIER  17   9   i
MP_COMMA       17   10   ,
MP_IDENTIFIER  17   12   sum
MP_RPAREN      17   15   )
MP_SCOLON      17   16   ;
MP_COMMENT     17   18   { call count }
MP_WRITE       18   3   write
MP_LPAREN      18   8   (
MP_IDENTIFIER  18   9   sum
MP_RPAREN      18   12   )
MP_SCOLON      18   13   ;
MP_COMMENT     18   15   { write result }
MP_WRITELN     19   3   writeln
MP_SCOLON      19   10   ;
MP_END         20   1   end
MP_PERIOD      20   4   .
MP_EOF         20   6   -1
