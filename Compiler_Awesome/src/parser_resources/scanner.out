MP_PROGRAM     1   1   PROGRAM
MP_IDENTIFIER  1   9   Sort
MP_SCOLON      1   13   ;
MP_IDENTIFIER  2   5   CONST
MP_COMMENT     3   9   { Max array size. }
MP_IDENTIFIER  4   9   MaxElts
MP_EQUAL       4   17   =
MP_INTEGER_LIT 4   19   50
MP_SCOLON      4   21   ;
MP_TYPE        5   5   TYPE
MP_COMMENT     6   9   { Type of the element array. }
MP_IDENTIFIER  7   9   IntArrType
MP_EQUAL       7   20   =
MP_IDENTIFIER  7   22   ARRAY
MP_INTEGER_LIT 7   28   1
MP_PERIOD      7   29   .
MP_PERIOD      7   30   .
MP_IDENTIFIER  7   31   MaxElts
MP_IDENTIFIER  7   39   OF
MP_INTEGER     7   42   Integer
MP_SCOLON      7   49   ;
MP_VAR         9   5   VAR
MP_COMMENT     10   9   { Indexes, exchange temp, array size. }
MP_IDENTIFIER  11   9   i
MP_COMMA       11   10   ,
MP_IDENTIFIER  11   12   j
MP_COMMA       11   13   ,
MP_IDENTIFIER  11   15   tmp
MP_COMMA       11   18   ,
MP_IDENTIFIER  11   20   size
MP_COLON       11   24   :
MP_INTEGER     11   26   integer
MP_SCOLON      11   33   ;
MP_COMMENT     13   9   { Array of ints }
MP_IDENTIFIER  14   9   arr
MP_COLON       14   12   :
MP_INTEGER     14   14   Integer
MP_SCOLON      14   21   ;
MP_COMMENT     16   5   { Read in the integers. }
MP_PROCEDURE   17   5   PROCEDURE
MP_READ        17   15   Read
MP_LPAREN      17   19   (
MP_VAR         17   20   VAR
MP_IDENTIFIER  17   24   size
MP_COLON       17   28   :
MP_INTEGER     17   30   Integer
MP_SCOLON      17   37   ;
MP_VAR         17   39   VAR
MP_IDENTIFIER  17   43   a
MP_COLON       17   44   :
MP_IDENTIFIER  17   46   IntArrType
MP_RPAREN      17   56   )
MP_SCOLON      17   57   ;
MP_BEGIN       18   9   BEGIN
MP_IDENTIFIER  19   13   size
MP_ASSIGN      19   18   :=
MP_INTEGER_LIT 19   22   1
MP_SCOLON      19   23   ;
MP_WHILE       20   13   WHILE
MP_NOT         20   19   NOT
MP_IDENTIFIER  20   23   eof
MP_DO          20   27   DO
MP_BEGIN       20   30   BEGIN
MP_READ        21   17   read
MP_LPAREN      21   21   (
MP_IDENTIFIER  21   22   a
MP_IDENTIFIER  21   23   size
MP_RPAREN      21   27   )
MP_SCOLON      21   28   ;
MP_IF          22   17   IF
MP_NOT         22   20   NOT
MP_IDENTIFIER  22   24   eof
MP_THEN        22   28   THEN
MP_IDENTIFIER  23   21   size
MP_ASSIGN      23   26   :=
MP_IDENTIFIER  23   30   size
MP_PLUS        23   35   +
MP_INTEGER_LIT 23   37   1
MP_END         24   13   END
MP_END         25   9   END
MP_SCOLON      25   12   ;
MP_BEGIN       27   5   BEGIN
MP_COMMENT     28   9   { Read }
MP_READ        29   9   Read
MP_LPAREN      29   13   (
MP_IDENTIFIER  29   14   size
MP_COMMA       29   18   ,
MP_IDENTIFIER  29   20   arr
MP_RPAREN      29   23   )
MP_SCOLON      29   24   ;
MP_COMMENT     31   9   { Sort using bubble sort. }
MP_FOR         32   9   FOR
MP_IDENTIFIER  32   13   i
MP_ASSIGN      32   15   :=
MP_IDENTIFIER  32   19   size
MP_MINUS       32   24   -
MP_INTEGER_LIT 32   26   1
MP_DOWNTO      32   28   DOWNTO
MP_INTEGER_LIT 32   35   1
MP_DO          32   37   DO
MP_FOR         33   13   FOR
MP_IDENTIFIER  33   17   j
MP_ASSIGN      33   19   :=
MP_INTEGER_LIT 33   23   1
MP_TO          33   25   TO
MP_IDENTIFIER  33   28   i
MP_DO          33   30   DO
MP_IF          34   17   IF
MP_IDENTIFIER  34   20   arr
MP_IDENTIFIER  34   23   j
MP_GTHAN       34   25   >
MP_IDENTIFIER  34   27   arr
MP_IDENTIFIER  34   30   j
MP_PLUS        34   32   +
MP_INTEGER_LIT 34   34   1
MP_THEN        34   36   THEN
MP_BEGIN       34   41   BEGIN
MP_IDENTIFIER  35   21   tmp
MP_ASSIGN      35   25   :=
MP_IDENTIFIER  35   29   arr
MP_IDENTIFIER  35   32   j
MP_SCOLON      35   33   ;
MP_IDENTIFIER  36   21   arr
MP_IDENTIFIER  36   24   j
MP_ASSIGN      36   26   :=
MP_IDENTIFIER  36   30   arr
MP_IDENTIFIER  36   33   j
MP_PLUS        36   35   +
MP_INTEGER_LIT 36   37   1
MP_SCOLON      36   38   ;
MP_IDENTIFIER  37   21   arr
MP_IDENTIFIER  37   24   j
MP_PLUS        37   26   +
MP_INTEGER_LIT 37   28   1
MP_ASSIGN      37   30   :=
MP_IDENTIFIER  37   34   tmp
MP_SCOLON      37   37   ;
MP_END         38   17   END
MP_SCOLON      38   20   ;
MP_COMMENT     40   9   { Print. }
MP_FOR         41   9   FOR
MP_IDENTIFIER  41   13   i
MP_ASSIGN      41   15   :=
MP_INTEGER_LIT 41   19   1
MP_TO          41   21   TO
MP_IDENTIFIER  41   24   size
MP_DO          41   29   DO
MP_WRITELN     42   13   writeln
MP_LPAREN      42   20   (
MP_IDENTIFIER  42   21   arr
MP_IDENTIFIER  42   24   i
MP_RPAREN      42   25   )
MP_END         43   5   END
MP_PERIOD      43   8   .
MP_EOF         44   1   -1
